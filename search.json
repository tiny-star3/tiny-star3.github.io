[{"title":"常用STL","url":"/2025/07/31/Algorithm/%E5%B8%B8%E7%94%A8STL/","content":"无情的搬运工！（从CSDN往回搬）\nSTL底层实现，移步Cpp    链接先欠着，还没开始写\nvector1.aboutvector可理解为变长数组，内部实现基于倍增思想。\nvector支持随机访问，即对于任意的下标0&lt;&#x3D;i&lt;n，可以像数组一样用 [i] 取值。\n2.声明#include&lt;vector&gt;\t\t\t//头文件vector&lt;int&gt; a;\t\t\t\t//相当于一个长度动态变化的int数组vector&lt;int&gt; b[233];\t\t\t//相当于第一维长233，第二维长度动态变化的int数组vector&lt;vector&lt;int&gt;&gt; c;\t\t//相当于一个第一维和第二维的长度动态变化的二维int数组struct rec&#123;...&#125;;vector&lt;rec&gt; d;\t\t\t\t//自定义的结构体类型也可以保存在vector中vector&lt;T&gt; v1;\t\t\t\t//v1 是一个元素类型为 T 的空 vectorvector&lt;T&gt; v2(v1);\t\t\t//使 v1 中所有元素初始化 v2vector&lt;T&gt; v2 = v1;\t\t\t//使 v1 中所有元素初始化 v2vector&lt;T&gt; v3(n, val);\t\t//v3 中包含了 n 个值为 val 的元素vector&lt;T&gt; v4(n);\t\t\t//v4 中包含了 n 个默认值初始化的元素vector&lt;T&gt; v5&#123;a, b, c...&#125;;\t//使用 a, b, c... 初始化 v5vector&lt;T&gt; v6(*p, *q);\t\t//使用另外一个数组的指针来初始化v6，这里即可以使用vector的指针，也可以使用普通数组的指针。 \n\n3.size&#x2F;emptysize函数返回vector的实际长度（包含的元素个数）。\nempty函数返回一个bool类型，表明vector是否为空。\n注：所有的STL容易都支持这两个方法，含义也都相同。\na.size();\t\t\t//返回数组vector a的长度a.empty();\t\t\t//返回一个bool值，true为vector为空，false为vector不为空\n\n时间复杂度：常数，即 O(1)\n4.clearclear函数把vector清空。\na.clear();\t\t\t//清空数组vector a\n\n时间复杂度：线性，即 O(n)\n5.迭代器迭代器就像STL容器的”指针“，可以用星号”*“操作符解除引用。\nvector的迭代器是”随机访问迭代器“，可以把vector的迭代器与一个整数相加减，其行为和指针的移动类似。可以把vector的两个迭代器相减，其结果也和指针相减类似，得到两个迭代器对应下标之间的距离。\n一个保存int的vector的迭代器声明方法为：\nvector&lt;int&gt;::iterator it;\t\t\t\n\n6.begin&#x2F;endbegin函数返回指向vector中第一个元素的迭代器。例如a是一个非空的vector，则 *a.begin() 与 a[0] 的作用相同。\n所有容器都可以视作一个”前闭后开“的结构，end函数返回vector的尾部，即第n个元素再往后的”边界“。 *a.end() 与 a[n] 都是越界访问，其中 n&#x3D;a.size()。\n下标遍历vector数组\nfor(int i=0;i&lt;a.size();i++)&#123;    cout&lt;&lt;a[i]&lt;&lt;endl;&#125;\n\n迭代器遍历vector数组\nfor(vector&lt;int&gt;::iterator it=a.begin();it!=a.end();it++)&#123;    cout&lt;&lt;*it&lt;&lt;endl;\t\t\t//遍历输出数组vector a的值&#125;\n\n时间复杂度：常数，即 O(1)\n7.front&#x2F;backfront函数返回vector的第一个元素，等价于 *a.begin() 和 a[0]。\nback函数返回vector的最后一个元素，等价于 *–a.end() 和 a[a.size()-1]。\na.front()\t\t\t//返回数组vector a的第一个元素a.back()\t\t\t//返回数组vector a的最后一个元素\n\n时间复杂度：常数，即 O(1)\n8.push_back&#x2F;pop_backpush_back(x)函数将元素x插入到vector的尾部。\npop_back()函数删除vector的最后一个元素。\na.push_back(x)\t\t\t//把元素x插入到vector a的尾部a.pop_back()\t\t\t//删除vector a的最后一个元素\n\n时间复杂度：常数，即 O(1)\n9.resizeresize() 改变vector的大小。如果 n 小于当前大小，则销毁额外的元素。如果 n 大于当前容器大小，则在向量末尾插入新元素。\nvoid resize (size_type n);void resize (size_type n, const value_type&amp; val);\t\t\t//n为新容器的大小，val为容器元素的初始值\n\n时间复杂度：线性，即 O(n)\n10.emplace_back（C++ 11）emplace_back()在向量的末尾插入新元素。如果需要更多空间，则会发生重新分配。此方法将容器大小增加一倍。\nvoid emplace_back (Args&amp;&amp;... args);\t\t\t//转发参数以构造新元素。a.emplace_back(b);\t\t\t//在a的末尾插入b\n\n时间复杂度：常数，即 O(1)\n11.insertinsert()在容器中的 position 插入新元素来扩展向量。如果需要更多空间，则会发生重新分配。此函数将容器大小增加一。\niterator insert (const_iterator position, const value_type&amp; val);\t//position为向量中要插入新元素的索引。val为要分配给新插入元素的值。返回一个指向新插入元素的迭代器。\n\n时间复杂度：线性，即 O(n)\n12.eraseerase() 从vector中删除单个元素，从vector中删除元素范围。\niterator erase (const_iterator position);\t//position为迭代器指向向量元素。返回一个被删除元素后面的元素的迭代器。iterator erase (const_iterator first, const_iterator last);//first为输入迭代器到范围内的初始位置。last为输入迭代器到范围内的最终位置。返回一个被删除元素后面的元素迭代器。\n\n时间复杂度：线性，即 O(n)\n","categories":["Algorithm"],"tags":["algorithm"]},{"title":"My New Post","url":"/2025/07/22/Life/My-New-Post/","content":"新的开始！\n渺如尘埃，灿若星辰！！！\n终于成功创建了这个个人博客，大学开始，搞到一半放弃了，现在大学毕业去读研，研0暑假终于弄好了。\n","categories":["Life"],"tags":["life"]},{"title":"伯乐码-农大夏令营","url":"/2025/07/31/Life/blm-Agricultural-University-Summer-Camp/","content":"2025.7.6-2025.7.21伯乐码-农大集训营搬砖7点不到起，9点半回酒店，真牛马！\n一共150*15&#x3D;2250元，有钱还是不亏，反正没事做。\n小朋友还是挺可爱的，还是能回忆一下，下面是一些小朋友照片。（PS：视频就不传了，太耗空间了，到时候有时间剪出来传抖音和B站，名字都是渺如星辰。）\naction4拍的，韩诗博，（action4拍照还是不行，什么时候得买台相机了）\n来张集体运动照（action4拍的）\n接下来是手机拍的，画质好不少，action4拍照还是太鸡肋了\n成功逮捕某人玩游戏😒（谭宇轩）\n酒店还在玩😝\n猜猜在干嘛，学霸与学渣🤨\n欠我两瓶水的人-吃饭聊天专属🧐（彭本航）\n某个害羞boy🤭（许嘉鸿）（视频拍得多点😈）\n","categories":["Life"],"tags":["work"]},{"title":"Hello World","url":"/2025/07/22/Sundry/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","categories":["Sundry"]}]